/* The following code was generated by JFlex 1.4.3 on 11.05.11 11:33 */

/*
 * Copyright 2011 Lars Heuer (heuer[at]semagia.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.semagia.mappish.mode;

import java.io.IOException;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.DefaultToken;
import org.fife.ui.rsyntaxtextarea.Token;

/**
 * TMQL tokenizer.
 * 
 * @author Lars Heuer (heuer[at]semagia.com) <a href="http://www.semagia.com/">Semagia</a>
 */
@SuppressWarnings("unused")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11.05.11 11:33 from the specification file
 * <tt>E:/projekte/mappish/mappish/src/grammar/TologTokenMaker.flex</tt>
 */
public class TologTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\1\0\1\11"+
    "\1\0\1\5\5\0\1\44\1\13\1\6\1\12\1\7\1\41\12\3"+
    "\1\10\1\0\1\43\1\42\1\43\1\6\1\0\1\27\1\34\1\32"+
    "\1\33\1\30\1\21\1\20\1\2\1\16\1\36\1\40\1\31\1\24"+
    "\1\17\1\22\1\25\1\2\1\23\1\15\1\26\1\14\1\37\2\2"+
    "\1\35\1\2\4\0\1\2\1\0\1\27\1\34\1\32\1\33\1\30"+
    "\1\21\1\20\1\2\1\16\1\36\1\40\1\31\1\24\1\17\1\22"+
    "\1\25\1\2\1\23\1\15\1\26\1\14\1\37\2\2\1\35\1\2"+
    "\74\0\1\4\10\0\27\2\1\0\37\2\1\0\u0208\2\160\4\16\2"+
    "\1\0\u1c81\2\14\0\2\2\61\0\2\4\57\0\u0120\2\u0a70\0\u03f0\2"+
    "\21\0\ua7ff\2\u2100\0\u04d0\2\40\0\u020e\2\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\2\5\1\1"+
    "\1\5\1\1\17\3\1\1\2\6\2\0\1\7\1\4"+
    "\1\0\1\10\24\3\1\11\6\3\1\11\11\3\1\12"+
    "\65\3\1\12\5\3\1\12\57\3\1\12\4\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\45\0\336"+
    "\0\u0103\0\224\0\224\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc"+
    "\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4"+
    "\0\u0309\0\u032e\0\u0353\0\45\0\u0353\0\u0378\0\336\0\u039d"+
    "\0\336\0\u0103\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b"+
    "\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e\0\u05a3"+
    "\0\u05c8\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb"+
    "\0\u06f0\0\u0715\0\u073a\0\u075f\0\u0784\0\u07a9\0\157\0\u07ce"+
    "\0\u07f3\0\u0818\0\u083d\0\u0862\0\u0887\0\u08ac\0\u08d1\0\u08f6"+
    "\0\157\0\u091b\0\u0940\0\u0965\0\u098a\0\u09af\0\u09d4\0\u09f9"+
    "\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21"+
    "\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49"+
    "\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c\0\u0d71"+
    "\0\u0d96\0\u0dbb\0\u0de0\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99"+
    "\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c\0\u0fc1"+
    "\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a\0\u109f\0\u10c4\0\u10e9"+
    "\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2\0\u11c7\0\u11ec\0\u1211"+
    "\0\u1236\0\u125b\0\u1280\0\u12a5\0\u12ca\0\u12ef\0\u1314\0\u1339"+
    "\0\u135e\0\u1383\0\u13a8\0\u13cd\0\u13f2\0\u1417\0\u143c\0\u1461"+
    "\0\u1486\0\u14ab\0\u14d0\0\u14f5\0\u151a\0\u153f\0\u1564\0\u1589"+
    "\0\u15ae\0\u15d3\0\u15f8\0\u161d\0\u1642\0\u1667\0\u168c\0\u16b1"+
    "\0\u16d6\0\u16fb\0\u1720\0\u1745\0\u176a\0\u178f\0\u17b4\0\u17d9"+
    "\0\u17fe\0\u1823\0\u1848\0\u186d\0\u1892\0\u18b7\0\u18dc\0\u1901"+
    "\0\u1926";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\4\1\20\1\21\1\22\1\23\1\4\1\24\1\25"+
    "\1\4\1\26\1\27\1\30\1\31\2\4\1\32\1\4"+
    "\1\33\1\34\1\35\1\34\46\0\1\3\45\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\25\4\7\0"+
    "\1\5\3\0\1\37\37\0\1\40\11\0\25\40\7\0"+
    "\1\41\41\0\11\42\1\43\33\42\2\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\1\4\1\44\7\4"+
    "\1\45\13\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\1\46\13\4\1\47\1\4\1\50\6\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\3\4\1\51\4\4\1\52\1\4\1\53\12\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\6\4"+
    "\1\54\16\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\6\4\1\55\1\56\15\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\5\4\1\57"+
    "\1\4\1\60\6\4\1\61\1\4\1\62\4\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\6\4"+
    "\1\63\5\4\1\64\10\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\14\4\1\65\10\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\6\4"+
    "\1\66\12\4\1\67\3\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\1\4\1\70\23\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\2\4"+
    "\1\71\22\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\6\4\1\72\16\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\2\4\1\73\10\4"+
    "\1\74\1\75\10\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\13\4\1\76\5\4\1\77\3\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\13\4\1\100\11\4\46\0\1\34\4\0\2\101\10\0"+
    "\25\101\6\0\3\40\2\0\1\40\2\0\1\40\1\0"+
    "\25\40\15\0\1\42\35\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\2\4\1\102\22\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\17\4\1\103"+
    "\5\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\20\4\1\104\4\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\15\4\1\105\7\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\6\4"+
    "\1\67\16\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\1\4\1\106\23\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\11\4\1\107\13\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\14\4\1\110\10\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\12\4\1\111\12\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\7\4\1\77"+
    "\15\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\6\4\1\112\16\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\5\4\1\113\17\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\17\4"+
    "\1\114\5\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\16\4\1\115\6\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\22\4\1\116\2\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\15\4\1\117\7\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\1\4\1\120\1\121\22\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\7\4"+
    "\1\122\15\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\11\4\1\123\13\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\11\4\1\124\13\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\1\4\1\125\14\4\1\77\6\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\10\4\1\126\14\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\1\127\12\4\1\130\11\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\7\4\1\131\15\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\12\4"+
    "\1\132\12\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\1\4\1\133\13\4\1\134\7\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\1\4"+
    "\1\135\23\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\7\4\1\136\5\4\1\137\7\4\6\0"+
    "\3\101\2\0\1\101\2\0\1\101\1\0\25\101\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\3\4"+
    "\1\140\21\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\13\4\1\141\11\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\22\4\1\142\2\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\14\4\1\143\10\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\12\4\1\144\12\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\6\4\1\145"+
    "\16\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\10\4\1\146\14\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\10\4\1\77\14\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\1\4"+
    "\1\147\23\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\14\4\1\55\10\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\1\150\24\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\14\4"+
    "\1\151\10\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\14\4\1\152\10\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\6\4\1\153\16\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\5\4\1\154\17\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\4\4\1\155\20\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\2\4\1\156"+
    "\22\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\14\4\1\111\10\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\6\4\1\157\16\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\2\4"+
    "\1\160\22\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\3\4\1\54\21\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\15\4\1\161\7\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\14\4\1\162\10\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\13\4\1\163\11\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\16\4\1\77"+
    "\6\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\14\4\1\141\10\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\14\4\1\164\10\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\2\4"+
    "\1\165\22\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\1\166\24\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\4\4\1\77\20\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\12\4"+
    "\1\155\12\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\14\4\1\167\10\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\16\4\1\160\6\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\13\4\1\170\11\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\7\4\1\160\15\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\171\1\0\25\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\14\4"+
    "\1\160\10\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\7\4\1\172\15\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\16\4\1\173\6\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\174\1\0"+
    "\25\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\1\175\24\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\2\4\1\176\22\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\14\4\1\77"+
    "\10\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\16\4\1\177\6\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\16\4\1\200\6\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\12\4"+
    "\1\77\12\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\14\4\1\201\10\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\16\4\1\202\6\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\12\4\1\203\12\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\204\1\0\25\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\13\4\1\127\11\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\14\4"+
    "\1\205\10\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\16\4\1\206\6\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\3\4\1\207\21\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\2\4\1\210\22\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\7\4\1\211\15\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\12\4\1\212"+
    "\12\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\11\4\1\213\13\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\7\4\1\214\15\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\14\4"+
    "\1\215\10\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\216\1\0\10\4\1\217\14\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\2\4\1\220\22\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\1\4\1\214\23\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\12\4\1\221\12\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\21\4\1\67"+
    "\3\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\15\4\1\222\7\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\223\1\0\25\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\12\4\1\224\12\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\16\4\1\225\6\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\17\4\1\226\5\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\14\4\1\227"+
    "\10\4\6\0\3\4\2\0\1\4\1\36\1\0\1\230"+
    "\1\0\25\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\15\4\1\231\7\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\16\4\1\124\6\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\1\4\1\111\23\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\3\4\1\232\21\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\13\4\1\233"+
    "\11\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\13\4\1\234\11\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\235\1\0\25\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\6\4\1\236\16\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\15\4\1\237\7\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\240\1\0\25\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\14\4\1\241\10\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\14\4"+
    "\1\242\10\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\3\4\1\214\21\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\2\4\1\243\22\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\13\4\1\244\11\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\13\4\1\245\11\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\11\4\1\111"+
    "\13\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\12\4\1\246\12\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\2\4\1\247\22\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\16\4"+
    "\1\250\6\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\2\4\1\251\22\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\2\4\1\210\12\4"+
    "\1\222\7\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\252\1\0\25\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\3\4\1\253\21\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\17\4\1\111"+
    "\5\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\21\4\1\254\3\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\10\4\1\124\14\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\2\4"+
    "\1\255\22\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\3\4\1\51\21\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\13\4\1\256\11\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\24\4\1\124\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\6\4\1\257\16\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\12\4\1\260\12\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\14\4\1\261\10\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\4\1\0\6\4\1\262\16\4\6\0\3\4"+
    "\2\0\1\4\1\36\1\0\1\4\1\0\12\4\1\263"+
    "\12\4\6\0\3\4\2\0\1\4\1\36\1\0\1\4"+
    "\1\0\5\4\1\111\17\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\2\4\1\264\22\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\7\4"+
    "\1\111\15\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\3\4\1\265\21\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\6\4\1\261\16\4"+
    "\6\0\3\4\2\0\1\4\1\36\1\0\1\4\1\0"+
    "\5\4\1\266\17\4\6\0\3\4\2\0\1\4\1\36"+
    "\1\0\1\267\1\0\25\4\6\0\3\4\2\0\1\4"+
    "\1\36\1\0\1\4\1\0\2\4\1\254\22\4\6\0"+
    "\3\4\2\0\1\4\1\36\1\0\1\4\1\0\7\4"+
    "\1\270\15\4\6\0\3\4\2\0\1\4\1\36\1\0"+
    "\1\4\1\0\6\4\1\271\16\4\6\0\3\4\2\0"+
    "\1\4\1\36\1\0\1\4\1\0\15\4\1\124\7\4"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6475];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\24\1\1\11\1\1\2\0"+
    "\2\1\1\0\227\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public TologTokenMaker() {
        super();
    }

    /* (non-Javadoc)
     * @see org.fife.ui.rsyntaxtextarea.TokenMakerBase#getLineCommentStartAndEnd()
     */
    public String[] getLineCommentStartAndEnd() {
        return new String[] {"#", null };
    }

    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
        resetTokenList();
        this.offsetShift = -text.offset + startOffset;
        // Start off in the proper state.
        int state = Token.NULL;
        s = text;
        try {
          yyreset(zzReader);
          yybegin(state);
          return yylex();
        } catch (IOException ioe) {
          ioe.printStackTrace();
          return new DefaultToken();
        }
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addHyperlinkToken(int, int, int)
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, false);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array The character array.
     * @param start The starting offset in the array.
     * @param end The ending offset in the array.
     * @param tokenType The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     * @param hyperlink Whether this token is a hyperlink.
     */
    public void addToken(char[] array, int start, int end, int tokenType,
              int startOffset, boolean hyperlink) {
        super.addToken(array, start,end, tokenType, startOffset, hyperlink);
        zzStartRead = zzMarkedPos;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>true</code> if EOF was reached, otherwise
     *              <code>false</code>.
     * @exception   IOException  if any I/O-Error occurs.
     */
    private /*keep*/ boolean zzRefill() throws java.io.IOException {
        return zzCurrentPos>=s.offset+s.count;
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream 
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader   the new input stream 
     */
    public /*keep*/ final void yyreset(java.io.Reader reader) throws java.io.IOException {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill
         * no longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TologTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TologTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { addToken(Token.RESERVED_WORD);
          }
        case 11: break;
        case 3: 
          { addToken(Token.IDENTIFIER);
          }
        case 12: break;
        case 10: 
          { addToken(Token.FUNCTION);
          }
        case 13: break;
        case 8: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 14: break;
        case 2: 
          { addToken(Token.WHITESPACE);
          }
        case 15: break;
        case 7: 
          { addToken(Token.VARIABLE);
          }
        case 16: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 17: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 18: break;
        case 4: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 19: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 20: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                addNullToken(); return firstToken;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
