/* The following code was generated by JFlex 1.4.3 on 13.05.11 12:26 */

/*
 * Copyright 2011 Lars Heuer (heuer[at]semagia.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.semagia.ooloo.mode;

import java.io.IOException;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.DefaultToken;
import org.fife.ui.rsyntaxtextarea.Token;

/**
 * TMQL tokenizer.
 * 
 * @author Lars Heuer (heuer[at]semagia.com) <a href="http://www.semagia.com/">Semagia</a>
 */
@SuppressWarnings("unused")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13.05.11 12:26 from the specification file
 * <tt>E:/projekte/oomaploomap/oomaploomap/src/grammar/TMQLTokenMaker.flex</tt>
 */
public class TMQLTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\0\1\12"+
    "\1\16\1\6\1\17\5\7\1\14\1\7\1\13\1\10\1\7\1\4"+
    "\1\4\1\4\1\4\6\4\1\11\1\0\1\7\1\7\1\7\1\0"+
    "\1\7\1\26\1\40\1\33\1\37\1\22\1\23\1\27\1\44\1\24"+
    "\1\3\1\45\1\32\1\30\1\36\1\34\1\20\1\42\1\21\1\31"+
    "\1\15\1\35\1\43\1\3\1\25\1\41\1\3\1\7\1\7\2\7"+
    "\1\3\1\0\1\26\1\40\1\33\1\37\1\22\1\23\1\27\1\44"+
    "\1\24\1\3\1\45\1\32\1\30\1\36\1\34\1\20\1\42\1\21"+
    "\1\31\1\15\1\35\1\43\1\3\1\25\1\41\1\3\1\7\1\7"+
    "\1\7\1\7\70\0\1\5\10\0\27\3\1\0\37\3\1\0\u0208\3"+
    "\160\5\16\3\1\0\u1c81\3\14\0\2\3\61\0\2\5\57\0\u0120\3"+
    "\u0a70\0\u03f0\3\21\0\ua7ff\3\u2100\0\u04d0\3\40\0\u020e\3\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\4\5\1\3"+
    "\1\6\1\1\17\3\2\0\1\7\1\4\1\0\1\10"+
    "\3\3\1\0\12\3\1\11\1\3\1\11\1\3\1\11"+
    "\27\3\1\0\32\3\1\12\1\3\2\0\20\3\2\0"+
    "\6\3\2\0\3\3\1\11\7\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\46\0\344"+
    "\0\u010a\0\230\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee"+
    "\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e"+
    "\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\344\0\u0402\0\344"+
    "\0\u010a\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c"+
    "\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c"+
    "\0\162\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746"+
    "\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876"+
    "\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6"+
    "\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6"+
    "\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06"+
    "\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36"+
    "\0\u0d5c\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\162"+
    "\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70"+
    "\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u1054\0\u107a\0\u10a0"+
    "\0\u10c6\0\u10ec\0\u1112\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0"+
    "\0\u11f6\0\u121c\0\u1242\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300"+
    "\0\46\0\u1326\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\7\1\11\2\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\4\1\23\1\4\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\5\4"+
    "\47\0\2\3\46\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\26\4\4\0\1\5\3\0"+
    "\1\36\40\0\1\37\11\0\1\37\2\0\26\37\4\0"+
    "\1\40\41\0\12\41\1\42\33\41\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\1\43\17\4\1\44\2\4\1\45\1\4\1\14\1\0"+
    "\44\14\20\0\1\46\30\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\12\4\1\47\13\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\50\11\4\1\51\11\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\5\4\1\52\4\4\1\53\10\4\1\54\2\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\1\55\4\4\1\56\5\4\1\57"+
    "\11\4\3\0\3\4\2\0\1\4\1\35\1\0\1\4"+
    "\1\0\1\60\2\0\3\4\1\61\5\4\1\62\4\4"+
    "\1\63\6\4\1\64\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\65\2\0\11\4\1\66\14\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\14\4\1\67\11\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\70\3\4\1\71\4\4\1\72\1\73\1\74\10\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\75\1\4\1\76\7\4\1\77"+
    "\11\4\3\0\3\4\2\0\1\4\1\35\1\0\1\4"+
    "\1\0\1\4\2\0\14\4\1\100\7\4\1\101\1\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\1\102\1\4\1\103\22\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\16\4\1\104\7\4\3\0\3\4\2\0\1\4"+
    "\1\35\1\0\1\4\1\0\1\4\2\0\14\4\1\105"+
    "\1\106\10\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\107\23\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\21\4\1\61\4\4\3\0\2\110\10\0\1\110"+
    "\2\0\26\110\3\0\3\37\2\0\1\37\2\0\1\37"+
    "\1\0\1\37\2\0\26\37\12\0\1\41\36\0\3\4"+
    "\2\0\1\4\1\35\1\0\1\4\1\0\1\4\2\0"+
    "\6\4\1\111\6\4\1\112\10\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\1\113"+
    "\25\4\3\0\3\4\2\0\1\4\1\35\1\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\114\23\4\21\0\1\115"+
    "\27\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\6\4\1\116\17\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\117\2\0\4\4"+
    "\1\120\21\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\12\4\1\113\13\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\4\4\1\121\21\4\3\0\3\4\2\0\1\4"+
    "\1\35\1\0\1\4\1\0\1\4\2\0\11\4\1\122"+
    "\14\4\3\0\3\4\2\0\1\4\1\35\1\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\123\23\4\3\0\3\4"+
    "\2\0\1\4\1\35\1\0\1\4\1\0\1\4\2\0"+
    "\14\4\1\124\11\4\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\12\4\1\125\13\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\1\61\24\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\124\23\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\6\4\1\61\17\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\11\4\1\126\5\4\1\127\6\4\3\0\3\4"+
    "\2\0\1\4\1\35\1\0\1\4\1\0\1\4\2\0"+
    "\14\4\1\61\11\4\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\14\4\1\130\11\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\13\4\1\61\12\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\11\4"+
    "\1\105\14\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\12\4\1\131\13\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\132"+
    "\2\0\26\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\14\4\1\133\11\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\10\4\1\122\15\4\3\0\3\4\2\0\1\4"+
    "\1\35\1\0\1\4\1\0\1\4\2\0\1\134\17\4"+
    "\1\135\5\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\6\4\1\67\17\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\10\4\1\136\15\4\3\0\3\4\2\0\1\4"+
    "\1\35\1\0\1\4\1\0\1\4\2\0\13\4\1\137"+
    "\12\4\3\0\3\4\2\0\1\4\1\35\1\0\1\4"+
    "\1\0\1\4\2\0\15\4\1\140\10\4\3\0\3\4"+
    "\2\0\1\4\1\35\1\0\1\4\1\0\1\4\2\0"+
    "\6\4\1\141\17\4\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\17\4\1\142\6\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\3\4\1\143\22\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\4\4"+
    "\1\144\12\4\1\145\6\4\3\0\3\4\2\0\1\4"+
    "\1\35\1\0\1\4\1\0\1\61\2\0\26\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\12\4\1\146\13\4\3\0\3\4\2\0\1\4"+
    "\1\35\1\0\1\4\1\0\1\4\2\0\11\4\1\66"+
    "\14\4\3\0\3\110\2\0\1\110\2\0\1\110\1\0"+
    "\1\110\2\0\26\110\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\23\4\1\147\2\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\150\23\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\151\23\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\16\4\1\61\7\4\22\0"+
    "\1\152\3\0\1\153\22\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\21\4\1\154\4\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\15\4\1\155\10\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\3\4"+
    "\1\156\22\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\11\4\1\157\14\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\61\23\4\3\0\3\4\2\0\1\4"+
    "\1\35\1\0\1\4\1\0\1\4\2\0\1\4\1\34"+
    "\24\4\3\0\3\4\2\0\1\4\1\35\1\0\1\4"+
    "\1\0\1\4\2\0\10\4\1\61\15\4\3\0\3\4"+
    "\2\0\1\4\1\35\1\0\1\4\1\0\1\4\2\0"+
    "\11\4\1\112\14\4\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\160\2\0\26\4\3\0\3\4"+
    "\2\0\1\4\1\35\1\0\1\4\1\0\1\4\2\0"+
    "\4\4\1\77\21\4\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\10\4\1\161\15\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\162\23\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\4\4"+
    "\1\163\21\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\1\122\25\4\3\0\3\4"+
    "\2\0\1\4\1\35\1\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\164\23\4\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\165\2\0\26\4\3\0\3\4"+
    "\2\0\1\4\1\35\1\0\1\4\1\0\1\4\2\0"+
    "\4\4\1\105\21\4\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\6\4\1\166\17\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\16\4\1\105\7\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\1\167\24\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\57\23\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\11\4\1\170\14\4\3\0\3\4\2\0\1\4"+
    "\1\35\1\0\1\4\1\0\1\4\2\0\22\4\1\171"+
    "\3\4\3\0\3\4\2\0\1\4\1\35\1\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\172\23\4\3\0\3\4"+
    "\2\0\1\4\1\35\1\0\1\4\1\0\1\4\2\0"+
    "\12\4\1\61\13\4\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\2\4\1\173\23\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\11\4\1\61\14\4\23\0\1\174\51\0"+
    "\1\175\21\0\3\4\2\0\1\4\1\35\1\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\176\23\4\3\0\3\4"+
    "\2\0\1\4\1\35\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\1\114\24\4\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\4\4\1\142\21\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\151\2\0\26\4\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\6\4\1\177\17\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\4\4\1\200\21\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\13\4"+
    "\1\105\12\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\11\4\1\201\14\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\1\135\24\4\3\0\3\4\2\0\1\4"+
    "\1\35\1\0\1\4\1\0\1\4\2\0\21\4\1\44"+
    "\4\4\3\0\3\4\2\0\1\4\1\35\1\0\1\4"+
    "\1\0\1\202\2\0\26\4\3\0\3\4\2\0\1\4"+
    "\1\35\1\0\1\4\1\0\1\4\2\0\6\4\1\203"+
    "\17\4\3\0\3\4\2\0\1\4\1\35\1\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\105\23\4\3\0\3\4"+
    "\2\0\1\4\1\35\1\0\1\4\1\0\1\4\2\0"+
    "\15\4\1\122\10\4\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\3\4\1\61\22\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\1\53\24\4\24\0\1\204\51\0"+
    "\1\205\20\0\3\4\2\0\1\4\1\35\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\1\151\24\4\3\0\3\4"+
    "\2\0\1\4\1\35\1\0\1\4\1\0\1\4\2\0"+
    "\16\4\1\206\7\4\3\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\3\4\1\34\22\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\3\4\1\207\22\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\14\4"+
    "\1\176\11\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\13\4\1\210\12\4\25\0"+
    "\1\211\46\0\1\211\22\0\3\4\2\0\1\4\1\35"+
    "\1\0\1\4\1\0\1\4\2\0\13\4\1\113\12\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\4\4\1\113\21\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\212\2\0\26\4"+
    "\3\0\3\4\2\0\1\4\1\35\1\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\213\23\4\3\0\3\4\2\0"+
    "\1\4\1\35\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\1\214\24\4\3\0\3\4\2\0\1\4\1\35\1\0"+
    "\1\4\1\0\1\4\2\0\4\4\1\215\21\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\11\4\1\216\14\4\3\0\3\4\2\0\1\4"+
    "\1\35\1\0\1\4\1\0\1\217\2\0\26\4\3\0"+
    "\3\4\2\0\1\4\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\4\4\1\220\21\4\3\0\3\4\2\0\1\4"+
    "\1\35\1\0\1\4\1\0\1\4\2\0\13\4\1\151"+
    "\12\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5168];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\25\1\2\0\2\1\1\0"+
    "\4\1\1\0\46\1\1\0\34\1\2\0\20\1\2\0"+
    "\6\1\2\0\3\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public TMQLTokenMaker() {
        super();
    }

    /* (non-Javadoc)
     * @see org.fife.ui.rsyntaxtextarea.TokenMakerBase#getLineCommentStartAndEnd()
     */
    public String[] getLineCommentStartAndEnd() {
        return new String[] {"#", null };
    }

    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
        resetTokenList();
        this.offsetShift = -text.offset + startOffset;
        // Start off in the proper state.
        int state = Token.NULL;
        s = text;
        try {
          yyreset(zzReader);
          yybegin(state);
          return yylex();
        } catch (IOException ioe) {
          ioe.printStackTrace();
          return new DefaultToken();
        }
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addHyperlinkToken(int, int, int)
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, false);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array The character array.
     * @param start The starting offset in the array.
     * @param end The ending offset in the array.
     * @param tokenType The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     * @param hyperlink Whether this token is a hyperlink.
     */
    public void addToken(char[] array, int start, int end, int tokenType,
              int startOffset, boolean hyperlink) {
        super.addToken(array, start,end, tokenType, startOffset, hyperlink);
        zzStartRead = zzMarkedPos;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>true</code> if EOF was reached, otherwise
     *              <code>false</code>.
     * @exception   IOException  if any I/O-Error occurs.
     */
    private /*keep*/ boolean zzRefill() throws java.io.IOException {
        return zzCurrentPos>=s.offset+s.count;
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream 
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader   the new input stream 
     */
    public /*keep*/ final void yyreset(java.io.Reader reader) throws java.io.IOException {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill
         * no longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TMQLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TMQLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { addToken(Token.RESERVED_WORD);
          }
        case 11: break;
        case 3: 
          { addToken(Token.IDENTIFIER);
          }
        case 12: break;
        case 8: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 13: break;
        case 2: 
          { addToken(Token.WHITESPACE);
          }
        case 14: break;
        case 7: 
          { addToken(Token.VARIABLE);
          }
        case 15: break;
        case 6: 
          { addToken(Token.COMMENT_EOL);
          }
        case 16: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 17: break;
        case 4: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 18: break;
        case 10: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 19: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 20: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                addNullToken(); return firstToken;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
